
import { toast } from "sonner";

// API keys
const CLOUDFLARE_API_KEY = "69Jz-coOYL8VI8fPR2MtES0-N7bTS02FVlA34D-e";
const STABILITY_API_KEY = "sk-glNeUMg8H2IIBEKoPNftbAIQ97EnAl5QrBAETnqxIT76zTCS";

interface GenerateImageResult {
  imageUrl: string;
  success: boolean;
  error?: string;
}

export async function generateDiagramWithAI(prompt: string): Promise<GenerateImageResult> {
  console.log("Generating image with AI for prompt:", prompt);
  
  // Enhance the prompt for better educational diagrams
  const enhancedPrompt = `Create a high-quality, detailed educational diagram illustrating: ${prompt}. 
  Make it visually appealing with bold colors, clear labels, and professional design. 
  Include appropriate arrows, visual elements, and annotations that help explain the concept effectively. 
  The diagram should be clean, modern, and easy to understand.`;
  
  // Try Cloudflare Workers AI first
  try {
    const cloudflareResult = await generateWithCloudflare(enhancedPrompt);
    if (cloudflareResult.success) {
      console.log("Successfully generated image with Cloudflare");
      return cloudflareResult;
    }
    console.warn("Cloudflare generation failed, falling back to Stability AI");
  } catch (error) {
    console.error("Error with Cloudflare generation:", error);
  }
  
  // Fall back to Stability AI
  try {
    const stabilityResult = await generateWithStabilityAI(enhancedPrompt);
    if (stabilityResult.success) {
      console.log("Successfully generated image with Stability AI");
      return stabilityResult;
    }
    console.warn("Stability AI generation failed");
  } catch (error) {
    console.error("Error with Stability AI generation:", error);
  }
  
  // Final fallback to static image if both methods fail
  console.warn("All generation attempts failed, using fallback static image");
  return {
    imageUrl: generateFallbackImageUrl(prompt),
    success: true
  };
}

async function generateWithCloudflare(prompt: string): Promise<GenerateImageResult> {
  try {
    const response = await fetch('https://api.cloudflare.com/client/v4/accounts/your-account-id/ai/run/@cf/stabilityai/stable-diffusion-xl-1.0', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${CLOUDFLARE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        prompt: prompt,
        num_steps: 40,
        width: 1024,
        height: 1024
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Cloudflare API error: ${response.status} - ${errorText}`);
    }

    const arrayBuffer = await response.arrayBuffer();
    const base64Image = btoa(
      new Uint8Array(arrayBuffer).reduce((data, byte) => data + String.fromCharCode(byte), '')
    );
    
    const imageUrl = `data:image/png;base64,${base64Image}`;
    return { imageUrl, success: true };
  } catch (error) {
    console.error("Cloudflare generation error:", error);
    return { 
      imageUrl: '', 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error with Cloudflare generation' 
    };
  }
}

async function generateWithStabilityAI(prompt: string): Promise<GenerateImageResult> {
  try {
    const response = await fetch('https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Bearer ${STABILITY_API_KEY}`
      },
      body: JSON.stringify({
        text_prompts: [
          {
            text: prompt,
            weight: 1
          }
        ],
        cfg_scale: 7,
        height: 1024,
        width: 1024,
        samples: 1,
        steps: 30
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Stability API error: ${errorData.message || response.statusText}`);
    }

    const responseData = await response.json();
    
    if (responseData.artifacts && responseData.artifacts.length > 0) {
      const base64Image = responseData.artifacts[0].base64;
      const imageUrl = `data:image/png;base64,${base64Image}`;
      return { imageUrl, success: true };
    } else {
      throw new Error('No image generated by Stability AI');
    }
  } catch (error) {
    console.error("Stability AI generation error:", error);
    return { 
      imageUrl: '', 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error with Stability AI generation' 
    };
  }
}

// Fallback function to generate a static image URL based on the prompt
function generateFallbackImageUrl(prompt: string): string {
  // Create a hash from the prompt to make unique but consistent URLs
  const hash = prompt.split('').reduce((acc, char) => {
    return ((acc << 5) - acc) + char.charCodeAt(0);
  }, 0);
  
  // Use one of several placeholder diagram images
  const imageOptions = [
    "/lovable-uploads/5aa6a42f-771c-4e89-a3ba-e58ff53c701e.png",
    "/lovable-uploads/a837a9a5-a83f-42b8-835c-261565ed609f.png",
    "/lovable-uploads/e0a024c4-b883-4cfa-a811-67a922e06849.png"
  ];
  
  const imageIndex = Math.abs(hash) % imageOptions.length;
  return imageOptions[imageIndex];
}
