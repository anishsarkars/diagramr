
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  X, 
  Download, 
  ExternalLink, 
  Heart, 
  Share2, 
  Maximize2, 
  Info
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { useState } from "react";
import { cn } from "@/lib/utils";

interface DiagramPreviewModalProps {
  open: boolean;
  onClose: () => void;
  diagram: {
    title: string;
    imageSrc: string;
    author?: string;
    sourceUrl?: string;
    tags?: string[];
    isGenerated?: boolean;
  } | null;
  onLike?: () => void;
  isLiked?: boolean;
}

export function DiagramPreviewModal({ 
  open, 
  onClose, 
  diagram, 
  onLike,
  isLiked = false
}: DiagramPreviewModalProps) {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  
  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
  };
  
  const handleDownload = () => {
    if (!diagram) return;
    
    const link = document.createElement('a');
    link.href = diagram.imageSrc;
    link.download = `${diagram.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  const handleShare = async () => {
    if (!diagram) return;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: diagram.title,
          text: `Check out this diagram: ${diagram.title}`,
          url: window.location.href
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      // Fallback - copy to clipboard
      navigator.clipboard.writeText(window.location.href);
      // TODO: Show toast notification
    }
  };
  
  return (
    <Dialog open={open} onOpenChange={(isOpen) => !isOpen && onClose()}>
      <DialogContent className={cn(
        "sm:max-w-2xl md:max-w-3xl lg:max-w-5xl p-0 gap-0 overflow-hidden",
        isFullscreen && "w-screen h-screen max-w-none max-h-none rounded-none"
      )}>
        <DialogHeader className="p-4 pb-0 flex flex-row items-center justify-between">
          <DialogTitle className="text-xl font-semibold pr-8 line-clamp-1">
            {diagram?.title}
          </DialogTitle>
          
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8"
              onClick={toggleFullscreen}
            >
              <Maximize2 className="h-4 w-4" />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8"
              onClick={onClose}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </DialogHeader>
        
        <div className={cn(
          "relative overflow-auto",
          isFullscreen ? "h-[calc(100vh-8rem)]" : "max-h-[70vh]"
        )}>
          {!imageLoaded && (
            <div className="absolute inset-0 flex items-center justify-center bg-background/50">
              <div className="h-8 w-8 border-4 border-primary/30 border-t-primary rounded-full animate-spin" />
            </div>
          )}
          
          <img 
            src={diagram?.imageSrc} 
            alt={diagram?.title || "Diagram preview"} 
            className={cn(
              "w-full h-auto object-contain",
              !imageLoaded && "opacity-0",
              isFullscreen ? "max-h-[calc(100vh-8rem)]" : "max-h-[70vh]"
            )}
            onLoad={() => setImageLoaded(true)}
          />
        </div>
        
        <DialogFooter className="flex flex-col sm:flex-row justify-between items-start gap-4 p-4 pt-3 border-t">
          <div className="flex flex-col gap-2">
            {diagram?.author && (
              <div className="text-sm text-muted-foreground">
                {diagram.isGenerated ? 'Generated by ' : 'Created by '}
                <span className="font-medium text-foreground">{diagram.author}</span>
              </div>
            )}
            
            {diagram?.tags && diagram.tags.length > 0 && (
              <div className="flex flex-wrap gap-1.5">
                {diagram.tags.map((tag, i) => (
                  <Badge key={i} variant="outline" className="text-xs px-2 py-0 h-5">
                    {tag}
                  </Badge>
                ))}
              </div>
            )}
          </div>
          
          <div className="flex items-center gap-2">
            {diagram?.isGenerated && (
              <Badge variant="secondary" className="gap-1 font-normal">
                <Sparkles className="h-3 w-3" />
                AI Generated
              </Badge>
            )}
            
            <Button
              size="sm"
              variant="outline"
              className="gap-1.5"
              onClick={handleShare}
            >
              <Share2 className="h-4 w-4" />
              Share
            </Button>
            
            <Button
              size="sm" 
              variant="outline"
              className="gap-1.5"
              onClick={handleDownload}
            >
              <Download className="h-4 w-4" />
              Download
            </Button>
            
            {onLike && (
              <Button
                size="sm"
                variant={isLiked ? "default" : "outline"}
                className={cn(
                  "gap-1.5", 
                  isLiked && "bg-pink-500 hover:bg-pink-600 border-pink-500"
                )}
                onClick={onLike}
              >
                <Heart className={cn(
                  "h-4 w-4",
                  isLiked ? "fill-white" : "fill-none"
                )} />
                {isLiked ? "Liked" : "Like"}
              </Button>
            )}
            
            {diagram?.sourceUrl && diagram.sourceUrl !== "#" && (
              <Button
                size="sm"
                variant="outline"
                className="gap-1.5"
                onClick={() => window.open(diagram.sourceUrl, '_blank')}
              >
                <ExternalLink className="h-4 w-4" />
                Source
              </Button>
            )}
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
